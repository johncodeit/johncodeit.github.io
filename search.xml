<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>2021年愿望</title>
    <url>/2021/01/02/2021%E5%B9%B4%E6%84%BF%E6%9C%9B/</url>
    <content><![CDATA[<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><h4 id="博客每周写一篇"><a href="#博客每周写一篇" class="headerlink" title="博客每周写一篇"></a>博客每周写一篇</h4><h4 id="技术书每月一本"><a href="#技术书每月一本" class="headerlink" title="技术书每月一本"></a>技术书每月一本</h4><h4 id="考一个技术证书"><a href="#考一个技术证书" class="headerlink" title="考一个技术证书"></a>考一个技术证书</h4><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="算法每两周一个"><a href="#算法每两周一个" class="headerlink" title="算法每两周一个"></a>算法每两周一个</h4><h4 id="知识用到工作中"><a href="#知识用到工作中" class="headerlink" title="知识用到工作中"></a>知识用到工作中</h4><h4 id="每周听樊登读书"><a href="#每周听樊登读书" class="headerlink" title="每周听樊登读书"></a>每周听樊登读书</h4><h3 id="保持"><a href="#保持" class="headerlink" title="保持"></a>保持</h3><h4 id="每天冥想"><a href="#每天冥想" class="headerlink" title="每天冥想"></a>每天冥想</h4><h4 id="早起早睡"><a href="#早起早睡" class="headerlink" title="早起早睡"></a>早起早睡</h4><h4 id="锻炼身体"><a href="#锻炼身体" class="headerlink" title="锻炼身体"></a>锻炼身体</h4>]]></content>
      <categories>
        <category>随想录</category>
      </categories>
      <tags>
        <tag>随想录</tag>
      </tags>
  </entry>
  <entry>
    <title>任务执行</title>
    <url>/2020/09/14/%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="1-TaskManager上算子运行"><a href="#1-TaskManager上算子运行" class="headerlink" title="1.TaskManager上算子运行"></a>1.TaskManager上算子运行</h2><p>（1）可以同时执行多个任务<br>（2）每个TaskManager可以有多个Slot<br>（3）每个Slot可执行过高算子，但是每个Slot中只能有一个同样的算子<br>（4）TaskManager中的多个任务可以在同一个进程内高兴第执行，数据交换无需访问网络<br>（5）任务过于集中，使得TaskManager负载过高，从而导致性能下降<br>（6）后面控制任务调度会讲到</p>
<h2 id="2-TaskManager运行"><a href="#2-TaskManager运行" class="headerlink" title="2.TaskManager运行"></a>2.TaskManager运行</h2><p>（1）TaskManager会在同一个JVM进程内以多线程方式执行任务<br>（2）和独立进程相比，线程更加轻量级并且通信开销更低<br>（3）但是无法严格隔离任务<br>（4）只要有一个任务运行异常，就可能沙溪TaskManager，导致TaskManager上的所有任务失败<br>（5）可以将TaskManager配置成一个TaskManager有一个Slot<br>（6）通过在TaskManager内部采用线性并行级每个主机上多部署TaskManager</p>
]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>Flink scala</tag>
      </tags>
  </entry>
  <entry>
    <title>配置时间特性-第六章1</title>
    <url>/2020/09/17/%E9%85%8D%E7%BD%AE%E6%97%B6%E9%97%B4%E7%89%B9%E6%80%A7-%E7%AC%AC%E5%85%AD%E7%AB%A01/</url>
    <content><![CDATA[<h3 id="ProcessingTime"><a href="#ProcessingTime" class="headerlink" title="ProcessingTime"></a>ProcessingTime</h3><ul>
<li>处理时间窗口基于机器时间触发</li>
<li>在窗口算子中使用处理时间会导致不确定性，应为窗口取决于元素到达的速率</li>
<li>由于处理任务无需等待水位线来驱动事件时间前进，所以可以提供地延迟</li>
</ul>
<h3 id="EventTime"><a href="#EventTime" class="headerlink" title="EventTime"></a>EventTime</h3><ul>
<li>指定算子根据数据自身包含的信息决定当前时间</li>
<li>每一个事件时间都有一个时间戳，系统的逻辑时间由水位线来定义</li>
<li>只有依靠水位线声明某个时间间隔内所有时间戳都已收到时，事件时间窗口才出发</li>
<li>即使乱序，事件时间窗口也会计算出正确结果</li>
<li>窗口结果不会取决于数据流的读取和处理速度</li>
<li>当使用EventTime的同时，可以使用处理时间窗口和计时器</li>
</ul>
<h3 id="IngetionTime"><a href="#IngetionTime" class="headerlink" title="IngetionTime"></a>IngetionTime</h3><ul>
<li>指定每个接收记录都把数据源算子的处理时间作为事件时间的时间戳，并自动生成水位线</li>
<li>时间进入流处理引擎的时间</li>
<li>EventTime相比，价值不大，因为性能和EventTime类似，但是无法提供确定的结果</li>
</ul>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main(args: Array[String]) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; set up the streaming execution environment</span><br><span class="line">    val env &#x3D; StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; use event time for the application</span><br><span class="line">    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</span><br></pre></td></tr></table></figure>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>是一个枚举类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">&#x2F;&#x2F; (powered by Fernflower decompiler)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">package org.apache.flink.streaming.api;</span><br><span class="line"></span><br><span class="line">import org.apache.flink.annotation.PublicEvolving;</span><br><span class="line"></span><br><span class="line">@PublicEvolving</span><br><span class="line">public enum TimeCharacteristic &#123;</span><br><span class="line">    ProcessingTime,</span><br><span class="line">    IngestionTime,</span><br><span class="line">    EventTime;</span><br><span class="line"></span><br><span class="line">    private TimeCharacteristic() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PublicEvolving</span><br><span class="line">  public void setStreamTimeCharacteristic(TimeCharacteristic characteristic) &#123;</span><br><span class="line">  &#x2F;&#x2F;校验是否为空</span><br><span class="line">      this.timeCharacteristic &#x3D; (TimeCharacteristic)Preconditions.checkNotNull(characteristic);</span><br><span class="line">      if (characteristic &#x3D;&#x3D; TimeCharacteristic.ProcessingTime) &#123;</span><br><span class="line">          this.getConfig().setAutoWatermarkInterval(0L);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          this.getConfig().setAutoWatermarkInterval(200L);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Internal</span><br><span class="line">public final class Preconditions &#123;</span><br><span class="line">    public static &lt;T&gt; T checkNotNull(T reference) &#123;</span><br><span class="line">        if (reference &#x3D;&#x3D; null) &#123;</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return reference;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>Flink scala</tag>
      </tags>
  </entry>
</search>
